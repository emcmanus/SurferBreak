New Upload Process


MODEL FLAGS

    is_uploaded

    show_in_publish_form (defaults to true, we'll set it to false after collection for the publish view)
    
    Instead, we'll just display a default thumbnail for the games that don't have them yet
    

UPLOAD

    Files go directly to S3, and the Flash uploader hits a "file complete" controller

    The controller places a job in SQS (Using ActiveMessaging), marks the game as uploaded

    A server on EC2 polls for jobs, when it finds one it does the following

    Copies the ROM to a local cache

    Generates Thumbnails

        Two different options:

        The EC2 instance inserts the appropriate rows into the DB (marking the game as finished, creating thumbnail objects)
    
        A client with DB access sits on the web server, looking for finished, but unhandled, SQS messages. This client then makes the DB inserts.
        
            -> Chosing this option. ActiveMessaging has a "poller" daemon built in that does just this.

    http://developer.amazonwebservices.com/connect/entry.jspa?categoryID=47&externalID=1151


PUBLISHING
    
    Users hits the publish view
    
    All games that are uploaded but not published are collected
    
    Set is_published to true on all game objects - save objects
    
    Iterate over collection showing edit forms for each file object
    
    On submit, update fields
    
    (If a user skips the "publish" step, their content will still be publicly available)
    